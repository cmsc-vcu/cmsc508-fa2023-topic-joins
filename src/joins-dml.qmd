---
title: Homework 6 - Documenting an HR database
author: (your name goes here!)
title: SQL Joins
author: John Leonard
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

As a highly prized and chased database wizard, you've been hired at an exorbitant hourly rate asked to document an HR database of a fortune 1_000_000 company.

You've been given credentials to the database.

Your tasks are to submit a report that contains:

1. A general written description of contents of database,
1. A Chen diagram highlighting the major entities and relations,
1. A Crows-foot diagram highlighting the entities, attributes, and the cardinality and participation of the relations,
1. A python-generated listing of SQL tables and fields, and
1. A listing of sample data showing the first bunch (5 or 10 or so) of each table.
1. All this will be documented in the report and the HTML report will be uploaded to canvas.

(Update this link with your github URL! and then delete this comment.)
Github repo: <https://github.com/cmsc-vcu/cmsc508-fa2023-hw6 ...>


# Description

(your description of the database goes here.  One or two paragraphs should suffice.  What is the purpose of the database? What are the
major tables/relations?  What is stored in each table? Any other
interesting features?)

# Chen diagram

The following diagram highlights the major relations in the database.

# Crows foot diagram

The following diagram provides greater detail on the entities and attributes and highlights the cardinality and participation of the relations.

# Listing of tables in the database

The following python blocks highlight the steps used to document the tables in the database.  The code is left in the report to show how fun it was to write python!

## Load libraries

(what is this code doing?)

```{python}
This is a tutorial workbook.  We've giving this teaching approach a try.

The topic of this workbook is SQL joins.

```{python}
#| echo: false
#| eval: true
import os
import pandas as pd
from sqlalchemy import create_engine
from dotenv import load_dotenv
from IPython.display import Markdown
from tabulate import tabulate
```

## Get credentials

(what is this code doing?)

```{python}
# load credentials from file ~/.env to OS environment
load_dotenv()

# load credentials from file ~/.env to OS environment
load_dotenv()
# use these credentials to populate a dictionary
config = {
  'user': os.getenv("HW6_USER"),
  'password': os.getenv("HW6_PASSWORD"),
  'host': os.getenv("HW6_HOST"),
  'database': os.getenv("HW6_DB_NAME")
}
```

## Open connection to database

(what is this code doing?)

```{python}

engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"
cnx = create_engine(engine_uri)
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

engine_uri_for_show = f"mysql+pymysql://{config['user']}:**pwd-goes-here**@{config['host']}/{config['database']}"
print(engine_uri_for_show)

```

## Print list of tables 

(copy/paste appropriate code from explore.html)
(Add a description of what's happening IN YOUR OWN WORDS!)

```{python}
print("just add code!")
```

## Listing of sample data

(copy/paste approriate code from explore.html)
(Add a description of what's happening IN YOUR OWN WORDS!)

```{python}
print("just add code!")
```

# Reflection

(Delete this text and replace it with your reflections:)

1. Please add a paragraph or two about how this project went.
1. Was it harder or easier than you expected?
1. Did the instructor provide too much information or not enough information?
1. Do you have suggestions for how it can be improved?
1. How does this assignment relate to project deliverable 4?
cnx = create_engine(engine_uri)

def run_query( sql ):
    df = None
    try:
        df = pd.read_sql(sql,cnx)
    except Exception as e:
        message = str(e)
        print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
        df = pd.DataFrame()   
    return df
```

## What are the the tables in the current database?

Here is the query

```{python}
sql = f"""
show tables;
"""
```

And here is the result.

```{python}
#| echo: false
#| eval: true
df = run_query( sql )
df
```

## Run a report of employee last name and department id

Here is the query

```{python}
sql = f"""
show tables;
"""
```

And here is the result.

```{python}
#| echo: false
#| eval: true
df = run_query( sql )
df
```

## How do I get department name?

JOIN

Here is the query

```{python}
sql = f"""
show tables;
"""
```

And here is the result.

```{python}
#| echo: false
#| eval: true
df = run_query( sql )
df
```


## Run a report of employee last names and manager last names

Here is the query

```{python}
sql = f"""
show tables;
"""
```

And here is the result.

```{python}
#| echo: false
#| eval: true
df = run_query( sql )
df
```
## Inner join

![](./assets/inner-join.png)


## Left join


![](./assets/left-join.png)


## Right Join

![](./assets/right-join.png)


## Outer join

![](./assets/outer-join.png)



## Question
Write a query to get the job title and maximum salary of the employees where maximum salary for the job is >= $4000.

## Question

Write a query to get the average salary for all departments employing more than 10 employees.

## Question

Find the average salary of departments 50 and 80 only.

## Question

Find in which department thereâ€™s a biggest deviation of salaries among its employees.
